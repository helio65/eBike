unit Controller.Membro;

interface

uses
  MVCFramework, MVCFramework.Commons;

type

  [MVCPath('/api')]
  TControllerMembro = class(TMVCController)
  public
    [MVCPath]
    [MVCHTTPMethod([httpGET])]
    procedure Index;

  protected
    procedure OnBeforeAction(Context: TWebContext; const AActionName: string; var Handled: Boolean); override;
    procedure OnAfterAction(Context: TWebContext; const AActionName: string); override;

  public
    //Sample CRUD Actions for a "Customer" entity
    [MVCPath('/membros')]
    [MVCHTTPMethod([httpGET])]
    procedure GetMembros;

    [MVCPath('/membros/($CO_Membro)')]
    [MVCHTTPMethod([httpGET])]
    procedure GetMembro(CO_Membro: Integer);

    [MVCPath('/membros')]
    [MVCHTTPMethod([httpPOST])]
    procedure AddMembro;

    [MVCPath('/membros/($CO_Membro)')]
    [MVCHTTPMethod([httpPUT])]
    procedure UpdateMembro(CO_Membro: Integer);

    [MVCPath('/membros/($CO_Membro)')]
    [MVCHTTPMethod([httpDELETE])]
    procedure DeleteMembro(CO_Membro: Integer);

  end;

implementation

uses
  System.SysUtils, MVCFramework.Logger, System.StrUtils;

procedure TControllerMembro.Index;
begin
  //use Context property to access to the HTTP request and response 
  Render('Hello DelphiMVCFramework World');
end;

procedure TControllerMembro.OnAfterAction(Context: TWebContext; const AActionName: string);
begin
  { Executed after each action }
  inherited;
end;

procedure TControllerMembro.OnBeforeAction(Context: TWebContext; const AActionName: string; var Handled: Boolean);
begin
  { Executed before each action
    if handled is true (or an exception is raised) the actual
    action will not be called }
  inherited;
end;

//Sample CRUD Actions for a "Customer" entity
procedure TControllerMembro.GetMembros;
begin
  //todo: render a list of customers
end;

procedure TControllerMembro.GetMembro(CO_Membro: Integer);
begin
  //todo: render the customer by id
end;

procedure TControllerMembro.AddMembro;

begin
  //todo: create a new customer
end;

procedure TControllerMembro.UpdateMembro(CO_Membro: Integer);
begin
  //todo: update customer by id
end;

procedure TControllerMembro.DeleteMembro(CO_Membro: Integer);
begin
  //todo: delete customer by id
end;



end.
